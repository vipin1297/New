pipeline {
    agent any
        stages{
            stage('Git Checkout for ui'){
                steps{
                    git 'https://github.com/vipin1297/parking_frontend'
                }
            }
            stage('Build') {
                steps{
                    sh 'npm install'
                    sh 'npm run build'
                    
                }
            }
           
            stage('SCM Checkout GitHub for backend')
      {
        steps {
              git 'https://github.com/vipin1297/INGFavBank.git'
              }
      }
       
          stage("QG Check-Backend") {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '/opt/maven/bin/mvn clean verify sonar:sonar'
                }
              timeout(time: 5, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
         
         
         stage( 'email' ){
            steps{
                emailext (

  subject: "Waiting for your Approval! Job: '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",

  body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>

              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",to: 'viratmaurya109@gmail.com'

 

)
            }
        }
                stage("UAT Approval") {
                  steps {
     
script {
def userInput = input(id: 'Proceed1', message: 'Promote build?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']])
echo 'userInput: ' + userInput
 
            if(userInput == true) {
                // do action
            } else {
                // not do action
                echo "Action was aborted."
            }
 
        }  
      }
 }
            stage('Uploading artifact to nexus') {
             steps {
                     sh"/opt/maven/bin/mvn clean deploy -Dmaven.test.skip=true"
                }
            }

       
        stage('Copy jar and application.property file to Ansible Server'){
            steps{
            sshPublisher(publishers: [sshPublisherDesc(configName: 'Local', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ansible-playbook new.yml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
       
       
    }
}